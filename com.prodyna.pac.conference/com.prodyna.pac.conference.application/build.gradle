/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Nicolas Moser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'ear'

description = 'This project is responsible for creating the Conference enterprise application archive (ear).'

dependencies {
    deploy project(':com.prodyna.pac.conference.ejb.facade')
    deploy project(':com.prodyna.pac.conference.ejb.beans')
    deploy project(path: ':com.prodyna.pac.conference.jsf', configuration: 'archives')
    deploy project(path: ':com.prodyna.pac.conference.rest', configuration: 'archives')
}

ear {
    deploymentDescriptor {
        applicationName = "conference"

        webModule('com.prodyna.pac.conference.jsf.war', "/app")
        webModule('com.prodyna.pac.conference.rest.war', "/rest")
    }
}

ear {
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": version, "Built-By": System.getProperty('user.name'), "Built-Date": new Date(), 'Built-JDK': System.getProperty('java.version'))
    }
}

task deploy(type: Copy, dependsOn: [clean, ear]) {

    def jbossHome = System.getenv('JBOSS_HOME')

    if (jbossHome == null) {
        throw new StopExecutionException('Environment Variable $JBOSS_HOME not set.');
    }

    copy {
        from ear
        into file(jbossHome + "/standalone/deployments")
    }

}

deploy.onlyIf {System.getenv('JBOSS_HOME') != null}
