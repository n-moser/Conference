/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Nicolas Moser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'ear'
apply plugin: 'distribution'

description = 'This project is responsible for creating the Conference application and distributions.'

version = "1.2"

dependencies {
    deploy project(':com.prodyna.pac.conference.ejb:com.prodyna.pac.conference.ejb.api')
    deploy project(':com.prodyna.pac.conference.ejb:com.prodyna.pac.conference.ejb.beans')
    deploy project(path: ':com.prodyna.pac.conference.jsf', configuration: 'archives')
    deploy project(path: ':com.prodyna.pac.conference.rest', configuration: 'archives')
}

distributions {

    def docsDir = file("${rootDir}/docs")
    def dbScriptDir = file("${rootDir}/config/database")
    def datasourceDir = file("${rootDir}/config/datasources")

    main {
        baseName = 'PAC-Conferences'

        contents {
            from(dbScriptDir) {
                into 'database/'
            }
            from(docsDir) {
                into 'docs/'
            }
            from(datasourceDir) {
                into 'datasources/'
            }

            from { ear }
            from { file("${rootDir}/LICENSE") }
            from { file("${rootDir}/NOTICE") }
            from { file("${rootDir}/README") }
        }

    }
}

distZip.dependsOn(clean, ear)
distTar.dependsOn(clean, ear)
installDist.dependsOn(clean, ear)

ear {
    deploymentDescriptor {
        applicationName = "conference"

        webModule('com.prodyna.pac.conference.jsf.war', "/app")
        webModule('com.prodyna.pac.conference.rest.war', "/rest")
    }

    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": version, "Built-By": System.getProperty('user.name'), "Built-Date": new Date(), 'Built-JDK': System.getProperty('java.version'))
    }
}

/**
 * Deploys the EAR to JBoss AS 7 deploy directory.
 */
task deployJBoss(type: Copy, dependsOn: ear) {

    description = 'Deploys the application ear to JBoss AS 7 (depending on $JBOSS_HOME)'

    group = 'JBoss'

    onlyIf {
        System.getenv('JBOSS_HOME') != null
    }

    def jbossHome = System.getenv('JBOSS_HOME')
    def destDir = file(jbossHome + "/standalone/deployments");

    from ear
    into destDir
}

/**
 * Removes the EAR from JBoss AS 7 deploy directory.
 */
task undeployJBoss(type: Delete) {

    description = 'Removes the applicatoin ear from JBoss AS 7 (depending on $JBOSS_HOME)'

    group = 'JBoss'

    def jbossHome = System.getenv('JBOSS_HOME')

    def earFile = file(jbossHome + "/standalone/deployments/" + ear.archiveName);
    def earDeployedFile = file(jbossHome + "/standalone/deployments/" + ear.archiveName + ".deployed");

    delete earFile, earDeployedFile
}
