/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Nicolas Moser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


apply plugin: 'jacoco'

test {

    ext.debugMode = false

    // explicitly include tests
    include 'com/prodyna/pac/conference/**'

    // show standard out and standard error of the test JVM(s) on the console
    // testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // set system properties for the test JVM(s)
    systemProperty 'arquillian.launch', 'jboss_gradle'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("\nRunning test: " + descriptor)
        logger.debug("Using JAVA_HOME: " + System.getenv('JAVA_HOME'))
        logger.debug("Java Directory: " + new File(System.getenv('JAVA_HOME')).isDirectory())
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->

        if (test.debugMode) {
            def msg = event.message
            msg = msg.replace("\r\n", "");
            msg = msg.replace("\n", "");
            logger.lifecycle("\t" + msg)
        }
    }

}

task checkCI(dependsOn: check) {

    doFirst {
        test.ext.debugMode = true
    }

//    check.mustRunAfter(checkCI)

}

jacocoTestReport.dependsOn(build)
